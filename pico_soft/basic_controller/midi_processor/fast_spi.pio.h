// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// fast_spi_pio //
// ------------ //

#define fast_spi_pio_wrap_target 0
#define fast_spi_pio_wrap 14

#define fast_spi_pio_offset_entry_point 10u

static const uint16_t fast_spi_pio_program_instructions[] = {
            //     .wrap_target
    0x6102, //  0: out    pins, 2         side 0 [1] 
    0x0940, //  1: jmp    x--, 0          side 1 [1] 
    0x6002, //  2: out    pins, 2         side 0     
    0xa022, //  3: mov    x, y            side 0     
    0x09e0, //  4: jmp    !osre, 0        side 1 [1] 
    0xa142, //  5: nop                    side 0 [1] 
    0xb142, //  6: nop                    side 2 [1] 
    0xb942, //  7: nop                    side 3 [1] 
    0xb142, //  8: nop                    side 2 [1] 
    0xb942, //  9: nop                    side 3 [1] 
    0x91e0, // 10: pull   ifempty block   side 2 [1] 
    0xb942, // 11: nop                    side 3 [1] 
    0xb142, // 12: nop                    side 2 [1] 
    0xb942, // 13: nop                    side 3 [1] 
    0xb142, // 14: nop                    side 2 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program fast_spi_pio_program = {
    .instructions = fast_spi_pio_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config fast_spi_pio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + fast_spi_pio_wrap_target, offset + fast_spi_pio_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

	#include "hardware/gpio.h"
	static inline void pio_dspi_cs_init(PIO pio, uint32_t sm, uint32_t offset, uint8_t spi_word_size, uint32_t sck_pin, uint32_t mosi0_pin) {
		pio_sm_config c = fast_spi_pio_program_get_default_config(offset);
		sm_config_set_out_pins(&c, mosi0_pin, 2);
		sm_config_set_sideset(&c, 2, false, false);
		sm_config_set_sideset_pins(&c, sck_pin);
		sm_config_set_out_shift(&c, false, true, spi_word_size);
		uint32_t cs_pin = sck_pin + 1;
		uint32_t mosi1_pin = mosi0_pin + 1;
		pio_sm_set_pins_with_mask(pio, sm, (1u << cs_pin), (1u << cs_pin) | (1u << sck_pin) | (1u << mosi1_pin) | (1u << mosi0_pin));
		pio_sm_set_pindirs_with_mask(pio, sm,(1u << cs_pin) | (1u << sck_pin) | (1u << mosi1_pin) | (1u << mosi0_pin), (1u << cs_pin) | (1u << sck_pin) | (1u << mosi1_pin) | (1u << mosi0_pin));
		pio_gpio_init(pio, cs_pin);
		pio_gpio_init(pio, sck_pin);
		pio_gpio_init(pio, mosi1_pin);
		pio_gpio_init(pio, mosi0_pin);
		uint entry_point = offset + fast_spi_pio_offset_entry_point;
		pio_sm_init(pio, sm, entry_point, &c);
		pio_sm_exec(pio, sm, pio_encode_set(pio_x, spi_word_size/2 - 2));
		pio_sm_exec(pio, sm, pio_encode_set(pio_y, spi_word_size/2 - 2));
		pio_sm_set_enabled(pio, sm, true);
	}

#endif

